{"ast":null,"code":"var _jsxFileName = \"/Users/dew/Desktop/reactproject/weather-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      //showPosition만들기 또 귀찮으니 익명함수에 냅다 코딩하기\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      getWeatherByCurrentLocation(lat, lon);\n      console.log(\"현재위치\", lat, lon);\n    }); //현재위치 가지고 오기\n    //console.log(\"getCurrentLocation\");\n  };\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    let url = \"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={196baf1f9fc9fa13cb4a7168ce52e224}&units=metric\";\n    let response = await fetch(url); //비동기니까 async처리해야한다.(자바스크립트 기본)\n    let data = await response.json();\n    setWeather(data);\n  };\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(WeatherBox, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(WeatherButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"utwoTFxU/Y6ElqQP3orwxeZHhew=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","WeatherBox","WeatherButton","jsxDEV","_jsxDEV","App","_s","weather","setWeather","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","getWeatherByCurrentLocation","console","log","url","response","fetch","data","json","children","class","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dew/Desktop/reactproject/weather-app/src/App.js"],"sourcesContent":["\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport WeatherBox from './component/WeatherBox';\nimport WeatherButton from './component/WeatherButton';\n\nfunction App() {\n\n  const [weather,setWeather] = useState(null);\n  const getCurrentLocation=()=>{\n    navigator.geolocation.getCurrentPosition((position)=>{\n      //showPosition만들기 또 귀찮으니 익명함수에 냅다 코딩하기\n      let lat = position.coords.latitude;\n      let lon = position.coords.longitude;\n      getWeatherByCurrentLocation(lat,lon);\n\n      console.log(\"현재위치\",lat,lon);\n    }); //현재위치 가지고 오기\n    //console.log(\"getCurrentLocation\");\n  };\n\n  const getWeatherByCurrentLocation = async(lat,lon) =>{\n    let url = \"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={196baf1f9fc9fa13cb4a7168ce52e224}&units=metric\";\n    let response = await fetch(url); //비동기니까 async처리해야한다.(자바스크립트 기본)\n    let data = await response.json();\n    setWeather(data);\n  };\n\n  useEffect(()=>{\n    getCurrentLocation();\n  },[]);\n  return (\n    <div>\n      <div class=\"container\">\n      <WeatherBox weather={weather}/>\n      <WeatherButton/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAClB,OAAO,sCAAsC;AAC7C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,aAAa,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC3C,MAAMS,kBAAkB,GAACA,CAAA,KAAI;IAC3BC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAG;MACnD;MACA,IAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;MAClC,IAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;MACnCC,2BAA2B,CAACL,GAAG,EAACG,GAAG,CAAC;MAEpCG,OAAO,CAACC,GAAG,CAAC,MAAM,EAACP,GAAG,EAACG,GAAG,CAAC;IAC7B,CAAC,CAAC,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAME,2BAA2B,GAAG,MAAAA,CAAML,GAAG,EAACG,GAAG,KAAI;IACnD,IAAIK,GAAG,GAAG,2HAA2H;IACrI,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC,CAAC,CAAC;IACjC,IAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAChClB,UAAU,CAACiB,IAAI,CAAC;EAClB,CAAC;EAED1B,SAAS,CAAC,MAAI;IACZU,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAC,EAAE,CAAC;EACL,oBACEL,OAAA;IAAAuB,QAAA,eACEvB,OAAA;MAAKwB,KAAK,EAAC,WAAW;MAAAD,QAAA,gBACtBvB,OAAA,CAACH,UAAU;QAACM,OAAO,EAAEA;MAAQ;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAC/B5B,OAAA,CAACF,aAAa;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAAC1B,EAAA,CAjCQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}